{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab04(hw).ipynp",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMYRHS3FN81zvfAa9qYMeZN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vnathu/PhanTichDuLieuHocSau/blob/main/Lab04(hw)_ipynp\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WZi--Je6vppA"
      },
      "source": [
        "#Khai báo các thư viện\n",
        "import pandas as pd\n",
        "import sys\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Tbk4q4lvtwU"
      },
      "source": [
        "1. Viết hàm load_data() để tải dữ liệu lên ứng dụng.Sau đó, hiển thị ra màn hình 10 dòng đầu tiên."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "SU4qU0pGvvlm",
        "outputId": "0c0a2b4e-7e5b-4c2d-d5dc-deaf7685db65"
      },
      "source": [
        "def load_data(filename):\n",
        "  return pd.read_csv('https://raw.githubusercontent.com/huynhhoc/DataAnalystDeepLearning/main/Data/'+filename)\n",
        "df = load_data('titanic_disaster.csv')\n",
        "df.head()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_a3qpc27vy4s"
      },
      "source": [
        "2. Thống kê dữ liệu thiếu trên các biến số và trực quan hóa dữ liệu thiếu bằng biểu đồ (Heat map). Hãy cho nhận xét về tình trạng thiếu dữ liệu Age, Cabin và Embarked"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "UR9WuWOdv1OD",
        "outputId": "64d0f732-f09a-4461-bb25-8cc1247bf17c"
      },
      "source": [
        "sns.heatmap(df.isna(), \n",
        "            yticklabels=False, \n",
        "            cbar=True, \n",
        "            cmap='viridis')"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2429bc4390>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HWQ7-SjPv7yZ"
      },
      "source": [
        "\n",
        "Nhận xét:Tình trạng thiếu dữ liệu Age, Cabin và Embarked\n",
        "\n",
        "Embarked: đủ dữ liệu\n",
        "Age, Cabin: không đủ dữ liệu(Age < Cabin)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zPwIwwgvv_ay"
      },
      "source": [
        "3. Xử lý tên cột tên Name, tách ra làm 2 cột: firstName và secondName."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rX_pv_X9wBJ6"
      },
      "source": [
        "# tách cột Name\n",
        "df[['firstName', 'secondName']]=df['Name'].str.split(',',expand = True)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "Ou_CysFcwHIX",
        "outputId": "67ef3fee-dcf6-4c90-8296-cc77d67fc7c0"
      },
      "source": [
        "df.head(5)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Mr. Owen Harris</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Miss. Laina</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>Mr. William Henry</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  ...                                   secondName\n",
              "0            1  ...                              Mr. Owen Harris\n",
              "1            2  ...   Mrs. John Bradley (Florence Briggs Thayer)\n",
              "2            3  ...                                  Miss. Laina\n",
              "3            4  ...           Mrs. Jacques Heath (Lily May Peel)\n",
              "4            5  ...                            Mr. William Henry\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "gmeH5z4bwKq8",
        "outputId": "538cc4c3-ae49-4fef-ca75-c51bb4aa46b7"
      },
      "source": [
        "#Xoá cột Name\n",
        "df = df.drop('Name',axis=1)\n",
        "df.head(5)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Mr. Owen Harris</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Miss. Laina</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>Mr. William Henry</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  ...                                   secondName\n",
              "0            1  ...                              Mr. Owen Harris\n",
              "1            2  ...   Mrs. John Bradley (Florence Briggs Thayer)\n",
              "2            3  ...                                  Miss. Laina\n",
              "3            4  ...           Mrs. Jacques Heath (Lily May Peel)\n",
              "4            5  ...                            Mr. William Henry\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bqWzHfp9wNjJ"
      },
      "source": [
        "4. Xứ lý rút gọn kích thước dữ liệu trên cột Sex như sau: thay thế male  M và female  F"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 371
        },
        "id": "LU11JBCtwR5R",
        "outputId": "cd1e5224-a406-46ef-8e2c-41624e24a00e"
      },
      "source": [
        "Sex = df['Sex']\n",
        "for i in range(len(Sex)):\n",
        "  if  Sex[i] == 'male':\n",
        "    df.Sex[i] = 'M'\n",
        "  if  Sex[i] == 'female':\n",
        "    df.Sex[i] = 'F'\n",
        "df.head(5)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Mr. Owen Harris</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Miss. Laina</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>Mr. William Henry</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  ...                                   secondName\n",
              "0            1  ...                              Mr. Owen Harris\n",
              "1            2  ...   Mrs. John Bradley (Florence Briggs Thayer)\n",
              "2            3  ...                                  Miss. Laina\n",
              "3            4  ...           Mrs. Jacques Heath (Lily May Peel)\n",
              "4            5  ...                            Mr. William Henry\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pEo2n11XwXt7"
      },
      "source": [
        "5. Xử lý dữ liệu thiếu trên biến Age bằng cách thay thế bằng giá trị trung bình tuổi: Hãy đưa ra quyết định dùng giá trị trung bình tuổi toàn bộ hành khách hay theo từng nhóm hạng vé (hạng hành khách: Pclass)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "aIG7mLlBwYLl",
        "outputId": "28644530-50e3-4611-d478-6cae316caeef"
      },
      "source": [
        "#Sử dụng Seaborn để vẽ biểu đồ (Box plot) trực quan dữ liệu để xác định phân phối tuổi (Age) trên từng hạng hành khách (Pclass\n",
        "sns.boxplot(y='Age', x='Pclass', data = df)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f24215f46d0>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "6CyQpq5swhMi",
        "outputId": "ddbdc61b-27f0-4cb1-97f5-bbbe50e69049"
      },
      "source": [
        "# Nhận xét về tuổi trung bình giữa các nhóm hành khách.\n",
        "#==> Phân phối tuổi trên hạng Pclass = 1 có dạng chuẩn hơn so với hạng 2 và hạng 3\n",
        "\n",
        "#Tiến hành thay thế giá trị Age bị thiếu.\n",
        "# dữ liệu thiếu trên biến Age bằng cách thay thế bằng giá trị trung bình tuổi\n",
        "df['Age'].fillna(df['Age'].mean(), inplace =True)\n",
        "#Hiển thị kết quả dạng bảng \n",
        "df"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Mr. Owen Harris</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Miss. Laina</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>Mr. William Henry</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>M</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Montvila</td>\n",
              "      <td>Rev. Juozas</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "      <td>Graham</td>\n",
              "      <td>Miss. Margaret Edith</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Johnston</td>\n",
              "      <td>Miss. Catherine Helen \"Carrie\"</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "      <td>Behr</td>\n",
              "      <td>Mr. Karl Howell</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "      <td>Dooley</td>\n",
              "      <td>Mr. Patrick</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  ...                                   secondName\n",
              "0              1  ...                              Mr. Owen Harris\n",
              "1              2  ...   Mrs. John Bradley (Florence Briggs Thayer)\n",
              "2              3  ...                                  Miss. Laina\n",
              "3              4  ...           Mrs. Jacques Heath (Lily May Peel)\n",
              "4              5  ...                            Mr. William Henry\n",
              "..           ...  ...                                          ...\n",
              "886          887  ...                                  Rev. Juozas\n",
              "887          888  ...                         Miss. Margaret Edith\n",
              "888          889  ...               Miss. Catherine Helen \"Carrie\"\n",
              "889          890  ...                              Mr. Karl Howell\n",
              "890          891  ...                                  Mr. Patrick\n",
              "\n",
              "[891 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "V6yUWdgTwky7",
        "outputId": "f1ad253d-2852-469c-a0f0-28b721159747"
      },
      "source": [
        "#Trực quan dữ liệu đã xử lý thiếu cho cột‘Age‘ bằng biểu đồ Heat map.\n",
        "sns.heatmap(df[['Age']].isna(), cmap = 'Reds', yticklabels= False)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2421411dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SVYap3JAwmqd"
      },
      "source": [
        "6. Xây dựng biến số Agegroup có thang đo thứ tự được ánh xạ theo thang đo khoảng dựa trên độ tuổi của hành khách như sau: (age =< 12]  Kid; (12, 18]: Teen, (18, 60]: Adult và ( age > 60): Older"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "neuFjahSwoDg",
        "outputId": "7b43b9cb-3eaf-4345-988c-0c152e900c55"
      },
      "source": [
        "for i in df['Age']:\n",
        "  df.loc[(df['Age'] <=  12), 'Agegroup'] ='Kid'\n",
        "  df.loc[(df['Age'] > 12) & (df['Age'] <= 18), 'Agegroup'] ='Teen'\n",
        "  df.loc[(df['Age'] > 18) & (df['Age'] <= 60), 'Agegroup'] ='Adult'\n",
        "  df.loc[(df['Age'] > 60), 'Agegroup'] ='Older'\n",
        "df.head(10)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "      <th>Agegroup</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Mr. Owen Harris</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Miss. Laina</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>Mr. William Henry</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330877</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "      <td>Moran</td>\n",
              "      <td>Mr. James</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17463</td>\n",
              "      <td>51.8625</td>\n",
              "      <td>E46</td>\n",
              "      <td>S</td>\n",
              "      <td>McCarthy</td>\n",
              "      <td>Mr. Timothy J</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>349909</td>\n",
              "      <td>21.0750</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Palsson</td>\n",
              "      <td>Master. Gosta Leonard</td>\n",
              "      <td>Kid</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>347742</td>\n",
              "      <td>11.1333</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Johnson</td>\n",
              "      <td>Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
              "      <td>Adult</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>237736</td>\n",
              "      <td>30.0708</td>\n",
              "      <td>NaN</td>\n",
              "      <td>C</td>\n",
              "      <td>Nasser</td>\n",
              "      <td>Mrs. Nicholas (Adele Achem)</td>\n",
              "      <td>Teen</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  ...                                   secondName Agegroup\n",
              "0            1         0  ...                              Mr. Owen Harris    Adult\n",
              "1            2         1  ...   Mrs. John Bradley (Florence Briggs Thayer)    Adult\n",
              "2            3         1  ...                                  Miss. Laina    Adult\n",
              "3            4         1  ...           Mrs. Jacques Heath (Lily May Peel)    Adult\n",
              "4            5         0  ...                            Mr. William Henry    Adult\n",
              "5            6         0  ...                                    Mr. James    Adult\n",
              "6            7         0  ...                                Mr. Timothy J    Adult\n",
              "7            8         0  ...                        Master. Gosta Leonard      Kid\n",
              "8            9         1  ...     Mrs. Oscar W (Elisabeth Vilhelmina Berg)    Adult\n",
              "9           10         1  ...                  Mrs. Nicholas (Adele Achem)     Teen\n",
              "\n",
              "[10 rows x 14 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-yPjjlk6wtEY"
      },
      "source": [
        "7. Tiến hành thêm đặc trưng về danh xưng (namePrefix) trong xã hội bằng cách tách Mr, Mrs, Miss, Master ra khỏi ―secondName"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vt-FXEeHwtlg"
      },
      "source": [
        "# tách cột secondName\n",
        "df[['namePrefix','secondName' ]] =df['secondName'].str.split('. ',1,expand = True)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "BbPRjRT7wzmc",
        "outputId": "a188ae37-fd9c-49d7-8a9e-21a915f87641"
      },
      "source": [
        "df.head(5)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "      <th>Agegroup</th>\n",
              "      <th>namePrefix</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Owen Harris</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>John Bradley (Florence Briggs Thayer)</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mrs</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Laina</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Miss</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Jacques Heath (Lily May Peel)</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mrs</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>William Henry</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  ...  Agegroup namePrefix\n",
              "0            1         0  ...     Adult         Mr\n",
              "1            2         1  ...     Adult        Mrs\n",
              "2            3         1  ...     Adult       Miss\n",
              "3            4         1  ...     Adult        Mrs\n",
              "4            5         0  ...     Adult         Mr\n",
              "\n",
              "[5 rows x 15 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwyixmARw16n"
      },
      "source": [
        "8. Khai thác thêm thông tin số lượng thành viên đi theo nhóm thân quen (familySize) đối với mỗi hành khách trên chuyến hải trình; family size = 1+ SibSp + Parch"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sRwUsP9Nw2gs"
      },
      "source": [
        "df['familySize'] = 1+df.SibSp+df.Parch"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "8EPlSpd7w6Aj",
        "outputId": "742c6e11-ded6-43be-a8c7-88726fd41b73"
      },
      "source": [
        "df.head(5)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "      <th>Agegroup</th>\n",
              "      <th>namePrefix</th>\n",
              "      <th>familySize</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Owen Harris</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>John Bradley (Florence Briggs Thayer)</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Laina</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Miss</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Jacques Heath (Lily May Peel)</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>William Henry</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ... Agegroup  namePrefix  familySize\n",
              "0            1         0       3  ...    Adult          Mr           2\n",
              "1            2         1       1  ...    Adult         Mrs           2\n",
              "2            3         1       3  ...    Adult        Miss           1\n",
              "3            4         1       1  ...    Adult         Mrs           2\n",
              "4            5         0       3  ...    Adult          Mr           1\n",
              "\n",
              "[5 rows x 16 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jtkO2Pdtw9vY"
      },
      "source": [
        "9. Tạo thêm đặc trưng ‗Alone‘ để xác định hành khách đi theo nhóm hay cá nhân bằng cách dựa trên familySize như sau: Nếu familySize = 0 thì giá trị Alone = 1 và ngược lại là 0."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sUn0is8bw-SG",
        "outputId": "8aa5e43f-fd57-445f-f9e7-b64a6d9ce9b7"
      },
      "source": [
        "for i in df['familySize']:\n",
        "  df.loc[(df['familySize'] ==  0), 'Alone'] = 1\n",
        "  df.loc[(df['familySize'] !=  0), 'Alone'] = 0\n",
        "df.Alone"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      0.0\n",
              "1      0.0\n",
              "2      0.0\n",
              "3      0.0\n",
              "4      0.0\n",
              "      ... \n",
              "886    0.0\n",
              "887    0.0\n",
              "888    0.0\n",
              "889    0.0\n",
              "890    0.0\n",
              "Name: Alone, Length: 891, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rUk9zcyExCJf"
      },
      "source": [
        "10. Tiến hành tách loại cabin (typeCabin) mà hành khách ở để lọc và phân tích đặc tính cabin. Loại cabin được kí hiệu bởi chữ cái đầu tiên. Lưu ý: Đối với dữ liệu cabin bị thiếu thì thay thế bằng ―Unknown"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DSp_lx-pxCn5",
        "outputId": "b384cdb1-bf13-464c-f3c7-a08441f99494"
      },
      "source": [
        "df['typeCabin']= None\n",
        "Cabin= df.Cabin\n",
        "for i in range(len(Cabin)):\n",
        "  if pd.isna(df.Cabin[i]) == True:\n",
        "    df['typeCabin'][i]= '―Unknown'\n",
        "  else:\n",
        "    df['typeCabin'][i]= df.Cabin[i][0]"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  import sys\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "HWBLYsXQxG6h",
        "outputId": "a3b09739-37c9-45ff-f01c-e11c9893adf5"
      },
      "source": [
        "# Hiển thị dữ liệu\n",
        "df"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>firstName</th>\n",
              "      <th>secondName</th>\n",
              "      <th>Agegroup</th>\n",
              "      <th>namePrefix</th>\n",
              "      <th>familySize</th>\n",
              "      <th>Alone</th>\n",
              "      <th>typeCabin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Braund</td>\n",
              "      <td>Owen Harris</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>―Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>Cumings</td>\n",
              "      <td>John Bradley (Florence Briggs Thayer)</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Heikkinen</td>\n",
              "      <td>Laina</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Miss</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>―Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>Futrelle</td>\n",
              "      <td>Jacques Heath (Lily May Peel)</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Allen</td>\n",
              "      <td>William Henry</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>―Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>M</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Montvila</td>\n",
              "      <td>Juozas</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Rev</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>―Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>F</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "      <td>Graham</td>\n",
              "      <td>Margaret Edith</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Miss</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>Johnston</td>\n",
              "      <td>Catherine Helen \"Carrie\"</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Miss</td>\n",
              "      <td>4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>―Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "      <td>Behr</td>\n",
              "      <td>Karl Howell</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>M</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "      <td>Dooley</td>\n",
              "      <td>Patrick</td>\n",
              "      <td>Adult</td>\n",
              "      <td>Mr</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>―Unknown</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 18 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass Sex  ...  namePrefix  familySize  Alone typeCabin\n",
              "0              1         0       3   M  ...          Mr           2    0.0  ―Unknown\n",
              "1              2         1       1   F  ...         Mrs           2    0.0         C\n",
              "2              3         1       3   F  ...        Miss           1    0.0  ―Unknown\n",
              "3              4         1       1   F  ...         Mrs           2    0.0         C\n",
              "4              5         0       3   M  ...          Mr           1    0.0  ―Unknown\n",
              "..           ...       ...     ...  ..  ...         ...         ...    ...       ...\n",
              "886          887         0       2   M  ...         Rev           1    0.0  ―Unknown\n",
              "887          888         1       1   F  ...        Miss           1    0.0         B\n",
              "888          889         0       3   F  ...        Miss           4    0.0  ―Unknown\n",
              "889          890         1       1   M  ...          Mr           1    0.0         C\n",
              "890          891         0       3   M  ...          Mr           1    0.0  ―Unknown\n",
              "\n",
              "[891 rows x 18 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ksBuIaHRxPC5"
      },
      "source": [
        "1. Trực quan thông tin tương quan tỉ lệ sống sót và thiệt mạng (Survived) trên từng nhóm giới tính (Sex)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "b0d3X3a5xQ2t",
        "outputId": "abc33b14-8736-4e43-e67b-aa061957fe87"
      },
      "source": [
        "Sur_Sex= df.groupby(['Survived', 'Sex'])[['Survived']].count()\n",
        "Sur_Sex"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <th>Sex</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
              "      <th>F</th>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>M</th>\n",
              "      <td>468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
              "      <th>F</th>\n",
              "      <td>233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>M</th>\n",
              "      <td>109</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              Survived\n",
              "Survived Sex          \n",
              "0        F          81\n",
              "         M         468\n",
              "1        F         233\n",
              "         M         109"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "id": "pNKONa3UxUMb",
        "outputId": "d4586195-6f13-450e-c29a-6254e6887e3e"
      },
      "source": [
        "unstackSur_Sex = Sur_Sex.unstack()\n",
        "unstackSur_Sex"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"2\" halign=\"left\">Survived</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th>F</th>\n",
              "      <th>M</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>81</td>\n",
              "      <td>468</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>233</td>\n",
              "      <td>109</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Survived     \n",
              "Sex             F    M\n",
              "Survived              \n",
              "0              81  468\n",
              "1             233  109"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "Xq_w2jstxWgc",
        "outputId": "a53ce2d3-5231-46a0-b6a2-61ad88d606dc"
      },
      "source": [
        "# Trực quan thông tin tương quan tỉ lệ \n",
        "#sống sót và thiệt mạng (Survived) trên từng nhóm giới tính (Sex).\n",
        "unstackSur_Sex['Survived'].plot.bar()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f24207aaa90>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "Afw3HtAyxYzf",
        "outputId": "bac7e0b7-b5d6-4035-de59-1721bdbe69c3"
      },
      "source": [
        "sns.boxplot(y='Age', x='Survived', data = df)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f24215b5350>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "H6_ltFtcxa6m",
        "outputId": "788fb9d3-462a-44cc-b2a7-0e71765f715b"
      },
      "source": [
        "sns.displot(df, x=\"Age\", col=\"Survived\", kde=True)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f241e59f8d0>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "KNApooDUxjbS",
        "outputId": "14075807-ff77-40b2-838c-e534fa3542b8"
      },
      "source": [
        "sns.catplot(x=\"Survived\", y=\"Age\", kind=\"swarm\",data=df)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 28.1% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 13.2% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
            "  warnings.warn(msg, UserWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f241e4bfd50>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bBAWt6iIxvgo"
      },
      "source": [
        "2. Trực quan thông tin hành khách sống sót (Survived) trên từng nhóm phân loại hành khách (Pclass)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "b91_d0XdxzlB",
        "outputId": "b57fb60e-0cdb-4c77-c13e-10080197967a"
      },
      "source": [
        "Sur_Pclass= df.groupby(['Survived', 'Pclass'])[['Survived']].count()\n",
        "Sur_Pclass"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">0</th>\n",
              "      <th>1</th>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">1</th>\n",
              "      <th>1</th>\n",
              "      <td>136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>119</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 Survived\n",
              "Survived Pclass          \n",
              "0        1             80\n",
              "         2             97\n",
              "         3            372\n",
              "1        1            136\n",
              "         2             87\n",
              "         3            119"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "id": "Ch8TC6d9x270",
        "outputId": "922cd983-a82c-4eb5-de77-74442df29c0b"
      },
      "source": [
        "unstackSur_Pclass = Sur_Pclass.unstack()\n",
        "unstackSur_Pclass"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"3\" halign=\"left\">Survived</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>80</td>\n",
              "      <td>97</td>\n",
              "      <td>372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>136</td>\n",
              "      <td>87</td>\n",
              "      <td>119</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Survived         \n",
              "Pclass          1   2    3\n",
              "Survived                  \n",
              "0              80  97  372\n",
              "1             136  87  119"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    }
  ]
}